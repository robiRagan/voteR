// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_voteR_RCPPEXPORTS_H_GEN_
#define RCPP_voteR_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace voteR {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("voteR", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("voteR", "_voteR_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in voteR");
            }
        }
    }

    inline DataFrame findICPoints(NumericVector voterID, NumericVector idealPoint, NumericVector altPointVector, double orderScalar, NumericVector salienceVector, double precision = .01) {
        typedef SEXP(*Ptr_findICPoints)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_findICPoints p_findICPoints = NULL;
        if (p_findICPoints == NULL) {
            validateSignature("DataFrame(*findICPoints)(NumericVector,NumericVector,NumericVector,double,NumericVector,double)");
            p_findICPoints = (Ptr_findICPoints)R_GetCCallable("voteR", "_voteR_findICPoints");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_findICPoints(Shield<SEXP>(Rcpp::wrap(voterID)), Shield<SEXP>(Rcpp::wrap(idealPoint)), Shield<SEXP>(Rcpp::wrap(altPointVector)), Shield<SEXP>(Rcpp::wrap(orderScalar)), Shield<SEXP>(Rcpp::wrap(salienceVector)), Shield<SEXP>(Rcpp::wrap(precision)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<DataFrame >(rcpp_result_gen);
    }

    inline DataFrame findParetoSet(SEXP idealPoints) {
        typedef SEXP(*Ptr_findParetoSet)(SEXP);
        static Ptr_findParetoSet p_findParetoSet = NULL;
        if (p_findParetoSet == NULL) {
            validateSignature("DataFrame(*findParetoSet)(SEXP)");
            p_findParetoSet = (Ptr_findParetoSet)R_GetCCallable("voteR", "_voteR_findParetoSet");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_findParetoSet(Shield<SEXP>(Rcpp::wrap(idealPoints)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<DataFrame >(rcpp_result_gen);
    }

    inline long double findSuperElipseRadius(NumericVector idealPoint, NumericVector altPoint, double orderScalar, NumericVector salienceVector) {
        typedef SEXP(*Ptr_findSuperElipseRadius)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_findSuperElipseRadius p_findSuperElipseRadius = NULL;
        if (p_findSuperElipseRadius == NULL) {
            validateSignature("long double(*findSuperElipseRadius)(NumericVector,NumericVector,double,NumericVector)");
            p_findSuperElipseRadius = (Ptr_findSuperElipseRadius)R_GetCCallable("voteR", "_voteR_findSuperElipseRadius");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_findSuperElipseRadius(Shield<SEXP>(Rcpp::wrap(idealPoint)), Shield<SEXP>(Rcpp::wrap(altPoint)), Shield<SEXP>(Rcpp::wrap(orderScalar)), Shield<SEXP>(Rcpp::wrap(salienceVector)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<long double >(rcpp_result_gen);
    }

    inline List findWinSet(List indifferenceCurves) {
        typedef SEXP(*Ptr_findWinSet)(SEXP);
        static Ptr_findWinSet p_findWinSet = NULL;
        if (p_findWinSet == NULL) {
            validateSignature("List(*findWinSet)(List)");
            p_findWinSet = (Ptr_findWinSet)R_GetCCallable("voteR", "_voteR_findWinSet");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_findWinSet(Shield<SEXP>(Rcpp::wrap(indifferenceCurves)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline long double minkowskiDistancePairOfPoints(NumericVector idealVector, NumericVector altVector, double orderScalar, NumericVector salienceVector) {
        typedef SEXP(*Ptr_minkowskiDistancePairOfPoints)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_minkowskiDistancePairOfPoints p_minkowskiDistancePairOfPoints = NULL;
        if (p_minkowskiDistancePairOfPoints == NULL) {
            validateSignature("long double(*minkowskiDistancePairOfPoints)(NumericVector,NumericVector,double,NumericVector)");
            p_minkowskiDistancePairOfPoints = (Ptr_minkowskiDistancePairOfPoints)R_GetCCallable("voteR", "_voteR_minkowskiDistancePairOfPoints");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_minkowskiDistancePairOfPoints(Shield<SEXP>(Rcpp::wrap(idealVector)), Shield<SEXP>(Rcpp::wrap(altVector)), Shield<SEXP>(Rcpp::wrap(orderScalar)), Shield<SEXP>(Rcpp::wrap(salienceVector)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<long double >(rcpp_result_gen);
    }

    inline NumericMatrix minkowskiDistanceSets(NumericMatrix idealsMatrix, NumericMatrix altsMatrix, NumericVector minkoOrderVector, NumericMatrix salienceMatrix) {
        typedef SEXP(*Ptr_minkowskiDistanceSets)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_minkowskiDistanceSets p_minkowskiDistanceSets = NULL;
        if (p_minkowskiDistanceSets == NULL) {
            validateSignature("NumericMatrix(*minkowskiDistanceSets)(NumericMatrix,NumericMatrix,NumericVector,NumericMatrix)");
            p_minkowskiDistanceSets = (Ptr_minkowskiDistanceSets)R_GetCCallable("voteR", "_voteR_minkowskiDistanceSets");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_minkowskiDistanceSets(Shield<SEXP>(Rcpp::wrap(idealsMatrix)), Shield<SEXP>(Rcpp::wrap(altsMatrix)), Shield<SEXP>(Rcpp::wrap(minkoOrderVector)), Shield<SEXP>(Rcpp::wrap(salienceMatrix)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline NumericMatrix minkowskiUtilitySets(NumericMatrix idealsMatrix, NumericMatrix altsMatrix, NumericVector minkoOrderVector, NumericVector lossOrderVector, NumericMatrix salienceMatrix) {
        typedef SEXP(*Ptr_minkowskiUtilitySets)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_minkowskiUtilitySets p_minkowskiUtilitySets = NULL;
        if (p_minkowskiUtilitySets == NULL) {
            validateSignature("NumericMatrix(*minkowskiUtilitySets)(NumericMatrix,NumericMatrix,NumericVector,NumericVector,NumericMatrix)");
            p_minkowskiUtilitySets = (Ptr_minkowskiUtilitySets)R_GetCCallable("voteR", "_voteR_minkowskiUtilitySets");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_minkowskiUtilitySets(Shield<SEXP>(Rcpp::wrap(idealsMatrix)), Shield<SEXP>(Rcpp::wrap(altsMatrix)), Shield<SEXP>(Rcpp::wrap(minkoOrderVector)), Shield<SEXP>(Rcpp::wrap(lossOrderVector)), Shield<SEXP>(Rcpp::wrap(salienceMatrix)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline int sgn(float aScalar) {
        typedef SEXP(*Ptr_sgn)(SEXP);
        static Ptr_sgn p_sgn = NULL;
        if (p_sgn == NULL) {
            validateSignature("int(*sgn)(float)");
            p_sgn = (Ptr_sgn)R_GetCCallable("voteR", "_voteR_sgn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sgn(Shield<SEXP>(Rcpp::wrap(aScalar)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline long double superElipseRadius(NumericVector idealPoint, NumericVector altPoint, double orderScalar, NumericVector salienceVector) {
        typedef SEXP(*Ptr_superElipseRadius)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_superElipseRadius p_superElipseRadius = NULL;
        if (p_superElipseRadius == NULL) {
            validateSignature("long double(*superElipseRadius)(NumericVector,NumericVector,double,NumericVector)");
            p_superElipseRadius = (Ptr_superElipseRadius)R_GetCCallable("voteR", "_voteR_superElipseRadius");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_superElipseRadius(Shield<SEXP>(Rcpp::wrap(idealPoint)), Shield<SEXP>(Rcpp::wrap(altPoint)), Shield<SEXP>(Rcpp::wrap(orderScalar)), Shield<SEXP>(Rcpp::wrap(salienceVector)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<long double >(rcpp_result_gen);
    }

}

#endif // RCPP_voteR_RCPPEXPORTS_H_GEN_
