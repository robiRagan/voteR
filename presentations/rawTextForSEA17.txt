voteR

The voteR package for the R statistical language is a set of tools for the creation and analysis of spatial voting models. 
Many of the computationally expensive procedures are written in C++. 
The package is written in using R's S4 object oriented frame work and therefore is highly modular and extendable. 
Users may "plug-in" their own code at most steps in a model, and my hope is that others will contribute useful additions to the package. 

The package contains the facilities to do the following:

Generate Voters
	A set of voters can be generated with the following attributes:
	
		Ideal Points: There will be 3 ways the package can assign ideal points to voters.
			
			1) Generate: The voter's ideal points can be drawn on each dimension from any of the statistical distributions in base R. Among those in base R are Uniform, Normal, Beta, and Log-Normal. In addition the voteR package provides a Truncated Normal and a Multimodal distribution (based on mixtures of normals).
					
			2) Calibrate: A user can provide data that they wish to use in order generate ideal points. For example, you could calibrate one dimension from income distribution data, and calibrate another dimension with survey data from a question on civil rights. All the user needs to do is provide the vector of data. The package will preform the kernel density estimation and randomly sample the required number of voters from the sample.
		
		    3) User Provided: A user may supply a set of ideal points from any source they wish. NOMINATE scores. Jackman-Rivers, Martin-Quinn. A great resocuce for looking at many of the common prcedures is "Analyzing Spatial Models of Choice and Judgment with R" (Armstrong et. al. 2014)
		
		Utility: Utility:
		
			Currently Implemented) Salience Weighted Minkowski Utillity: Each voter has a Minkowski "order" and a salience weighting that determines the shape of their indifference curves. The salience weight squeezes the indifference curves so that on a dimension that is more important to a voter the indifference curves get closer together. The Minkowski order creates the base shape of the indifference curves.
				Order = 1 is the Manhattan Distance with diamond shaped indifference curves.
				Order = 2 is the Euclidian Distance with circular indifference curves.
                Order = 100 approximates the Chebyshev Distance with square indifference curves.
			
				* Analogy: Cobb-Douglass is to CES as is Euclidian (Minkowski Order =2) is to the Salience Weighted Minkowski Utillity.
			
			Future) Complementarity and Salience Weighted Euclidian: Each voter has a salience weighting and a value for the degree of Complementarity between the dimensions.
			
			Future) Asymmetric Utility: The voters indifference curves are not symmetric around the voters ideal point.**
 	
	

		
	
Analysis
	With the voteR package you can calculate the following:
		
		Preferred-to-set for each voter.
		The k - Majority Rule Win-Set of an alternative.
		The Pareto-Set.
		
		Cutline. (only for Minko = 2)
		Heart*
		Yolk*
		Uncovered Set*
		Banks Set*
		Other Rule Win-Sets.
		
voteR also provides the user with a set of tools for running simulations of spatial voting models.



Voting Rules
	The voteR package comes with a set of common voting rules.
		Simple Majority Rule
		Majority Rule with Runoff.
		Plurality Rule 
		Unanimity Rule
		k-Majority Rule
		Borda Count
		Approval
		Condorcet

------------------------		

NEXT: 

electoR
The electoR package for the R statistical language is a set of tools for the creation and analysis of electoral models. The package is written in using R's S4 object oriented frame work and therefore is highly modular and extendable. Users may "plug-in" their own code at most steps in a model, and my hope is that others will contribute useful additions to the package. 

The package contains the facilities to do the following:

Create Electoral Districts: 
		electoR allows a user to create a set of nested electoral districts. The number of levels of nesting is L and the number of districts at each level is d_l.  For example in the U.S. system L=3 with the country as a whole, states and congressional districts as the three levels. d_1=1, d_2=50 and d_3 = 435.
		
		Each level also has a number of representatives per district. In the U.S. case k_1 = 1, k_2 = 2, and k_3 = 1.
		
		At each level, the district nesting can either be even or uneven.
				
				Even: At each level the number of districts nested across the districts is roughly even.
				
				Uneven: The number of districts nested is uneven. The user picks a probability distribution to determine the unevenness. 
		
		
Create Candidates and Platforms:
	The user may specify how many candidates c may run at each level, in each district, in each election. The default settings take a random draw from U(k,2*k).
	
		Candidate platforms can be created in one of three ways.
			1) Several voters can be selected as citizen candidates (Besley and Cote 1997, 1998)
			
			2) Candidates can be created in the same manner that voters were created using voteR.
			
			3) The user can supply candidate platforms from another source.
		
Assign Candidates an Adaptation Rule. 
	Candidates can adapt their platform between elections.
				Aggregator: Adapt platform to the centroid of those that selected them in the previous period/poll. 
				Hunter: Keep changing platform in the same direction if the last change did better, otherwise make random moves.
				Predator: Move platform toward the candidate that is receiving the most support.
				Sticker: Never change your platform. 
					(Rules from Laver 2005)
			
	The Candidates are allowed 5 rounds of polling and adaptation between elections.
			

Assign Candidates to Parties.
	Candidates are assigned to parties based on a k-means clustering of the overall distribution of voters. 
	The number of clusters/parties is determined by using a Duda-Hart test. 
			

Assign Voters to Districts:
	At each level voters can be assigned to districts in one of two ways.
			1) Random
			
			2) Gerrymandered.
					The user must indicate what alternative should the gerrymandering be biasing toward.
					
					For example the centroid of the ideal points of the parent district at level 2, could be used to gerrymander the districts at level 3.
					
Create an Election Train Schedule
	Each district need not have an election each period. 
	electoR allows a user can create a schedule of elections that is then used as the pattern for elections to follow for the entire run of a simulation.
	
	
	
Run an Election Using a Given Electoral Rule
	The main functionality of electoR is to simulate the election of one or more deliberative bodies.
	Currently, there are two electoral rules to choose from:
		1) Plurality Rule with Single Member Districts
		2) Party list proportional representation with Multimember Districts.

voteR also provides the user with a set of tools for running simulations of spatial voting models.

-------------------
legislatoR
The legislatoR package for the R statistical language is a set of tools for the creation and analysis of legislative models. The package is written in using R's S4 object oriented framework and therefore is highly modular and extendable. Users may "plug-in" their own code at most steps in a model, and my hope is that others will contribute useful additions to the package. 

The package contains the facilities to do the following:
	
Create a deliberative Body
	Each deliberative body has the following set of characteristics:
	
		1) A voting rule.
		2) An Agenda Setting Rule
			Who gets to decide if proposals are allowed?
			What criteria do they use to make their decision?
		3) Proposal Process
			How are proposals made?
		4) Open or closed amendment process.
			This can be set exogenously or allowed to be the choice of the leader of the deliberative body.
		4) Direct party influence.
			Do members vote based on only their ideal point or some weighted average of their ideal point and the party leaders.

Elect party leaders.
		In each chamber the centroid of each party becomes the party leader.
		
Create a multi-deliberative body system.
	As of now the package only allows for a multiple veto institution system.
		That is each deliberative body being modeled must pass an alternative in order for it to defeat the status quo.
	In the near future, veto overrides will be added to the system.
	
-------------------------

Application: The Pareto Properties of Legislative Systems

I compare the ability of two different policy making systems in their ability to create and preserve Pareto Optimal outcomes.
	1) Plurality rule to elect single member's at the district level and where there is no direct party influence in the legislature. (SMD)
	2) The other system uses proportional representation in a single district, party list system with strong party influence in the legislature. (PR List)

My preliminary findings indicate that for models when voters are drawn from a truncated normal distribution, that on average the "PR List" system is able to generate Pareto optimal outcomes more quickly than is the SMD system. This is due to the fact that the strong party control both in naming the list of candidates and having a heavy direct influence on the way members vote gives the plurality party the ability to deliver Pareto preferred outcomes more easily than their counterparts in the SMD system. However, the flip side to that coin is that the PR List system is more likely to leave the Pareto Set than is the SMD system. This is similar to the tradeoff between "retention" and "attraction" found by Dougherty and Edward (2012), when examining majority and unanimity rule.

